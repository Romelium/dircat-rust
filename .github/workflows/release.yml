name: Release

on:
  push:
    tags:
      - 'v*.*.*' # Trigger on tags like v0.1.0, v1.2.3

  workflow_dispatch:

permissions:
  contents: write # Needed to create releases and upload assets

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: dircat
  STAGING_DIR: staging

jobs:
  build-release:
    name: Build Release Binaries (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      # Don't cancel other jobs if one fails. This is useful for matrix builds.
      fail-fast: false
      matrix:
        include:
          # --- Linux ---
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl # Statically linked for portability
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu # For ARM64 (e.g., Raspberry Pi 4/5, AWS Graviton)

          # --- macOS ---
          - os: macos-latest
            target: x86_64-apple-darwin # For Intel Macs
          - os: macos-14 # Runner with Apple Silicon support
            target: aarch64-apple-darwin # For Apple Silicon (M1/M2/M3)

          # --- Windows ---
          - os: windows-latest
            target: x86_64-pc-windows-msvc # 64-bit
          - os: windows-latest
            target: i686-pc-windows-msvc # 32-bit
          - os: windows-latest
            target: aarch64-pc-windows-msvc # For Windows on ARM

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          cache: 'cargo'

      - name: Install cross-compilation dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          set -e
          if [[ "${{ matrix.target }}" == "x86_64-unknown-linux-musl" ]]; then
            sudo apt-get update && sudo apt-get install -y musl-tools
          elif [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu
          fi

      - name: Configure Cargo linker (for Linux aarch64 cross-compile)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          mkdir -p .cargo
          cat > .cargo/config.toml <<EOF
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          EOF

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }} --verbose

      - name: Prepare artifact details
        id: artifact_details
        shell: bash
        run: |
          # Determine binary suffix and archive format based on OS
          BIN_SUFFIX=""
          ARCHIVE_FORMAT="tar.gz"
          if [[ "${{ matrix.target }}" == *"-windows-"* ]]; then
            BIN_SUFFIX=".exe"
            ARCHIVE_FORMAT="zip"
          fi
          
          # Set environment variables for subsequent steps
          echo "BIN_SUFFIX=${BIN_SUFFIX}" >> $GITHUB_ENV
          echo "ARCHIVE_FORMAT=${ARCHIVE_FORMAT}" >> $GITHUB_ENV
          
          # Set step output for use in action inputs
          ARCHIVE_FILENAME="${{ env.BINARY_NAME }}-${{ github.ref_name }}-${{ matrix.target }}.${ARCHIVE_FORMAT}"
          echo "archive_filename=${ARCHIVE_FILENAME}" >> $GITHUB_OUTPUT

      - name: Create staging directory and copy files (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -e
          mkdir -p ${{ env.STAGING_DIR }}
          cp "target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}${{ env.BIN_SUFFIX }}" "${{ env.STAGING_DIR }}/"
          cp LICENSE README.md "${{ env.STAGING_DIR }}/"

      - name: Create staging directory and copy files (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path "${{ env.STAGING_DIR }}" -Force
          Copy-Item -Path "target\${{ matrix.target }}\release\${{ env.BINARY_NAME }}${{ env.BIN_SUFFIX }}" -Destination "${{ env.STAGING_DIR }}\"
          Copy-Item -Path "LICENSE", "README.md" -Destination "${{ env.STAGING_DIR }}\"

      - name: List staging directory contents (for debugging)
        run: ls -R ${{ env.STAGING_DIR }}
        shell: bash

      - name: Package release artifacts (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          tar czf "${{ steps.artifact_details.outputs.archive_filename }}" -C "${{ env.STAGING_DIR }}" .

      - name: Package release artifacts (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Compress-Archive -Path "${{ env.STAGING_DIR }}\*" -DestinationPath "${{ steps.artifact_details.outputs.archive_filename }}"

      - name: Upload release asset
        uses: actions/upload-artifact@v4
        with:
          name: release-asset-${{ matrix.target }}
          path: ${{ steps.artifact_details.outputs.archive_filename }}

  create-release:
    name: Create GitHub Release
    needs: build-release
    runs-on: ubuntu-latest
    steps:
      - name: Download all release assets
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: List downloaded files (for debugging)
        run: ls -R release-assets

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          generate_release_notes: true
          files: release-assets/*/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
